# Day21 - Throwback to Math Facts

# Create a game to test your friends‚Äô knowledge on their math facts.

"""
üëâ Day 21 Challenge
Test your family and friends on their multiplication knowledge (or just be really mean to people you know and ask them to work out their multiplication tables for 5,474,000,000....)

Prompt the user by asking for a multiplication table for the number of their choice.
Generate the multiplication table for 1 to 10 times that number and ask each math fact as a question (psst...that's a hint).
If the user gets the math correct, award them a point. If they get it wrong, do not give them any points.
At the end of the 10 rounds, show the user their score out of 10 for how many math facts they got correct.
Why not give users an emoji if they get all 10 math facts correct?

Math Game!

Name your multiples: 7

1 X 7 = 7
Great work! 

2 X 7 = 14
Awesome!

3 X 7 = 54
Nope. The answer was 21. 

---

You scored 3 out of 10.


Hints:
*Use a variable when asking the user what multiplication facts they want to solve.
*Within the for loop, set up a variable, input statement, and if statements.
*Don't forget to include your counter and an if statement to say when to give a perfect score emoji.
"""
#from getpass import getpass as input

""" print("Math Game!")
print()
num = int(input("Name your multiples: "))
print()
score = 0
for i in range(1,11):
    result = i * num
    resultUser = int(input(f"{i} X {num} = "))
    phrases = ["Great work!", "Awesome!", "You got it right!", "Yaaay!", "Well done!", "Great job", "You\'re a genius", "Wow, that\'s impressive work", "This is insanely good", "Excellent!"]

    if resultUser == result:
        print(phrases[i-1])
        print()
        score += 1
    else:
        print(f"Nope! the answer is {result}")
print(f"Your score {score} out of 10") """

# ------------------------------------------------------------------------
"""
print("Welcome to Math Facts Game")
print()
print("How well do you know your math facts? Pick a number and I will give you 10 math facts to solve.")
print()

fact_family = int(input("Name your multiples: "))
print()

counter = 0
for i in range(1, 11):
  correct_answer = i*fact_family
  print(i, "x", fact_family)
  answer = int(input("> "))
  if answer == correct_answer:
    print("You got it right!")
    counter += 1
  else:
    print("That's not correct. It should have been", correct_answer)

if counter == 10:
  print("Wow! A perfect score! ü•≥")
else:
  print("You got", counter, "out of 10 correct.")
  """

#La planta que quiere es

""" name = input("Introduce el nombre de la flor: ")

if name == "ESPATIFILIO":
    print("Si, ¬°El ESPATIFILIO es la mejor planta de todos los tiempos!")
elif name == "espatifilo":
    print("No, ¬°quiero un gran ESPATIFILIO!")
else:
    print("¬°ESPATIFILIO!, ¬°No", name + "!")
 """
# ----- Soy o no bisiesto ------

""" year = int(input("Introduce un a√±o: "))

if year < 1582:
	print("No esta dentro del per√≠odo del calendario Gregoriano")
else:
	if year % 4 != 0:
		print("A√±o Com√∫n")
	elif year % 100 != 0:
		print("A√±o Bisiesto")
	elif year % 400 != 0:
		print("A√±o Com√∫n")
	else:
		print("A√±o Bisiesto")
		 """
# x, y, z = 5, 10, 8

# x, y, z = 5, 10, 8
# x, y, z = z, y, x

""" x = 10
 
if x == 10:
    print(x == 10)
if x > 5:
    print(x > 5)
if x < 10:
    print(x < 10)
else:
    print("else")

# ¬øCu√°l es el resultado del siguiente fragmento de c√≥digo?

x = 1
y = 1.0
z = "1"
 
if x == y:
    print("one")
if y == int(z):
    print("two")
elif x == y:
    print("three")
else:
    print("four")

while True:
    print("Estoy atrapado dentro de un bucle.")
    print("Para finalizar tu programa, simplemente presiona Ctrl-C (o Ctrl-Break en algunas computadoras)") """


""" # Almacena el actual n√∫mero m√°s grande aqu√≠.
largest_number = -999999999

# Ingresa el primer valor.
number = int(input("Introduce un n√∫mero o escribe -1 para detener: "))

# Si el n√∫mero no es igual a -1, continuaremos
while number != -1:

# ¬øEs el n√∫mero m√°s grande que el valor de largest_number?

    if number > largest_number:

# S√≠ si, se actualiza largest_number.
      largest_number = number

# Ingresa el siguiente n√∫mero.
    number = int(input("Introduce un n√∫mero o escribe -1 para detener: "))

# Imprime el n√∫mero m√°s grande.
print("El n√∫mero m√°s grande es:", largest_number) """

#---------------------------------------------------------------------------------------

# Un programa que lee una secuencia de n√∫meros
# y cuenta cu√°ntos n√∫meros son pares y cu√°ntos son impares.
# El programa termina cuando se ingresa un cero.
 
odd_numbers = 0
even_numbers = 0
 
# Lee el primer n√∫mero.
number = int(input("Introduce un n√∫mero o escribe 0 para detener: "))
 
# 0 termina la ejecuci√≥n.
while number != 0:
    # Verificar si el n√∫mero es impar.
    if number % 2 == 1:
        # Incrementar el contador de n√∫meros impares odd_numbers.
        odd_numbers += 1
    else:
        # Incrementar el contador de n√∫meros pares even_numbers.
        even_numbers += 1
    # Leer el siguiente n√∫mero.
    number = int(input("Introduce un n√∫mero o escribe 0 para detener: "))
 
# Imprimir resultados.
print("Conteo de n√∫meros impares:", odd_numbers)
print("Conteo de n√∫meros pares:", even_numbers)

counter = 5
while counter != 0:
    print("Dentro del bucle.", counter)
    counter -= 1
print("Fuera del bucle.", counter)

counter = 5
while counter:
    print("Dentro del bucle.", counter)
    counter -= 1
print("Fuera del bucle.", counter)

# Adivina el n√∫mero secreto

""" Escenario

Un mago junior ha elegido un n√∫mero secreto. Lo ha escondido en una variable llamada secret_number. Quiere que todos los que ejecutan su programa jueguen el juego Adivina el n√∫mero secreto, y adivina qu√© n√∫mero ha elegido para ellos. ¬°Qui√©nes no adivinen el n√∫mero quedar√°n atrapados en un bucle sin fin para siempre! Desafortunadamente, √©l no sabe c√≥mo completar el c√≥digo.

Tu tarea es ayudar al mago a completar el c√≥digo en el editor de tal manera que el c√≥digo:

pedir√° al usuario que ingrese un n√∫mero entero;
utilizar√° un bucle while;
comprobar√° si el n√∫mero ingresado por el usuario es el mismo que el n√∫mero escogido por el mago. Si el n√∫mero elegido por el usuario es diferente al n√∫mero secreto del mago, el usuario deber√≠a ver el mensaje "¬°Ja, ja! ¬°Est√°s atrapado en mi bucle!" y se le solicitar√° que ingrese un n√∫mero nuevamente. Si el n√∫mero ingresado por el usuario coincide con el n√∫mero escogido por el mago, el n√∫mero debe imprimirse en la pantalla, y el mago debe decir las siguientes palabras: "¬°Bien hecho, muggle! Eres libre ahora."
¬°El mago est√° contando contigo! No lo decepciones.

  INFO EXTRA  
Por cierto, observa la funci√≥n print(). La forma en que lo hemos utilizado aqu√≠ se llama impresi√≥n multil√≠nea. Puedes utilizar comillas triples para imprimir cadenas en varias l√≠neas para facilitar la lectura del texto o crear un dise√±o especial basado en texto. Experimenta con ello. """

secret_number = 777

print(
"""
+================================+
| ¬°Bienvenido a mi juego, muggle!|
| Introduce un n√∫mero entero     |
| y adivina qu√© n√∫mero he        |
| elegido para ti.               |
|¬øCu√°l es el n√∫mero secreto?     |
+================================+
""")

user_number = int(input("Ingresa el n√∫mero: "))

while user_number != secret_number:
    print("¬°Ja, ja! ¬°Est√°s atrapado en mi bucle!")
    user_number = int(input("Ingresa el n√∫mero nuevamente: "))
print(secret_number, "¬°Bien hecho, muggle! Eres libre ahora.")

"""
nota la palabra clave pass dentro del cuerpo del bucle - no hace nada en absoluto; es una instrucci√≥n vac√≠a - la colocamos aqu√≠ porque la sintaxis del bucle for exige al menos una instrucci√≥n dentro del cuerpo (por cierto - if, elif, else y while expresan lo mismo).
"""
power = 1
for expo in range(16):
    print("2 a la potencia de", expo, "es", power)
    power *= 2

"""
Fundamentos del bucle for ‚Äì contando lentamente (mississippily)

Escenario
¬øSabes lo que es Mississippi? Bueno, es el nombre de uno de los estados y r√≠os en los Estados Unidos. El r√≠o Mississippi tiene aproximadamente 2,340 millas de largo, lo que lo convierte en el segundo r√≠o m√°s largo de los Estados Unidos (el m√°s largo es el r√≠o Missouri). ¬°Es tan largo que una sola gota de agua necesita 90 d√≠as para recorrer toda su longitud!

La palabra Mississippi tambi√©n se usa para un prop√≥sito ligeramente diferente: para contar mississippily (mississippimente).

Si no est√°s familiarizado con la frase, estamos aqu√≠ para explicarte lo que significa: se utiliza para contar segundos.

La idea detr√°s de esto es que agregar la palabra Mississippi a un n√∫mero al contar los segundos en voz alta hace que suene m√°s cercano al reloj, y por lo tanto "un Mississippi, dos Mississippi, tres Mississippi" tomar√° aproximadamente unos tres segundos reales de tiempo. A menudo lo usan los ni√±os que juegan al escondite para asegurarse de que el buscador haga un conteo honesto.

Tu tarea es muy simple aqu√≠: escribe un programa que use un bucle for para "contar de forma mississippi" hasta cinco. Habiendo contado hasta cinco, el programa deber√≠a imprimir en la pantalla el mensaje final "¬°Listos o no, ah√≠ voy!"

Utiliza el esqueleto que hemos proporcionado en el editor.

  INFO EXTRA  
Ten en cuenta que el c√≥digo en el editor contiene dos elementos que pueden no ser del todo claros en este momento: la sentencia import time y el m√©todo sleep(). Vamos a hablar de ellos pronto.

Por el momento, nos gustar√≠a que supieras que hemos importado el m√≥dulo time y hemos utilizado el m√©todo sleep() para suspender la ejecuci√≥n de cada funci√≥n posterior de print() dentro del bucle for durante un segundo, de modo que el mensaje enviado a la consola se parezca a un conteo real. No te preocupes - pronto aprender√°s m√°s sobre m√≥dulos y m√©todos.

Salida esperada:

1 Mississippi
2 Mississippi
3 Mississippi
4 Mississippi
5 Mississippi
"""

import time

# Escribe un bucle for que cuente hasta cinco.
    # Cuerpo del bucle: imprime el n√∫mero de iteraci√≥n del bucle y la palabra "Mississippi".
    # Cuerpo del bucle, emplea : time.sleep(1)

# Escribe una funci√≥n print con el mensaje final.

for i in range(1,6):
    time.sleep(1) #el m√©todo sleep() para suspender la ejecuci√≥n de cada funci√≥n posterior de print() dentro del bucle for durante un segundo
    print(f"{i} Mississippi")

print("¬°Listos o no, ah√≠ voy!")

"""
Las sentencias break y continue

break - sale del bucle inmediatamente, e incondicionalmente termina la operaci√≥n del bucle; el programa comienza a ejecutar la instrucci√≥n m√°s cercana despu√©s del cuerpo del bucle.
continue - se comporta como si el programa hubiera llegado repentinamente al final del cuerpo; el siguiente turno se inicia y la expresi√≥n de condici√≥n se prueba de inmediato.
"""

# break - ejemplo

print("La instrucci√≥n break:")
for i in range(1, 6):
    if i == 3:
        break
    print("Dentro del bucle.", i)
print("Fuera del bucle.")


# continue - ejemplo

print("\nLa instrucci√≥n continue:")
for i in range(1, 6):
    if i == 3:
        continue
    print("Dentro del bucle.", i)
print("Fuera del bucle.")

# ------------------------------------------

while True:
    number = int(input("Ingresa un n√∫mero o escribe -1 para finalizar el programa: "))
    if number == -1:
        break
    counter += 1
    if number > largest_number:
        largest_number = number

if counter != 0:
    print("El n√∫mero m√°s grande es", largest_number)
else:
    print("No has ingresado ning√∫n n√∫mero.")

# -----------------------------------------------

largest_number = -99999999
counter = 0

number = int(input("Ingresa un n√∫mero o escribe -1 para finalizar el programa: "))

while number != -1:
    if number == -1:
        continue
    counter += 1

    if number > largest_number:
        largest_number = number
    number = int(input("Ingresa un n√∫mero o escribe -1 para finalizar el programa: "))

if counter:
    print("El n√∫mero m√°s grande es", largest_number)
else:
    print("No has ingresado ning√∫n n√∫mero.")

"""
La sentencia break - atrapado en un bucle

Escenario
La instrucci√≥n break se implementa para salir/terminar un bucle.

Dise√±a un programa que use un bucle while y le pida continuamente al usuario que ingrese una palabra a menos que ingrese "chupacabra" como la palabra de output secreta, en cuyo caso el mensaje "Has dejado el bucle con √©xito." debe imprimirse en la pantalla y el bucle debe terminar.

No imprimas ninguna de las palabras ingresadas por el usuario. Utiliza el concepto de ejecuci√≥n condicional y la sentencia break.
"""


"""
üí° Problema: Dividir en grupos

Un docente quiere realizar una actividad en grupo para una clase de n estudiantes, con exactamente x estudiantes por grupo. Sabe que es posible que la divisi√≥n implique la existencia de un grupo con menos estudiantes, por lo que plantea una estrategia.


En primer lugar, cuando vaya a realizar la actividad, asignar√° aleatoriamente los grupos para prevenir que sean los mismos estudiantes en cada actividad. En caso de que uno de los grupos quede con menos de x estudiantes, estos no realizar√°n la actividad y en su lugar apoyar√°n el proceso de calificaci√≥n del resto de grupos.


Este grupo de calificadores deber√° preparar y entregar un reporte corto de observaciones del trabajo realizado por cada uno de los grupos completos que fueron asignados.


Por ejemplo, para una clase con 16 estudiantes y una actividad que requiera crear grupos de 6 personas, podr√≠amos obtener 2 grupos completos y un grupo de 4 calificadores. Cada uno de ellos calificar√≠a individualmente a los 2 grupos creados, para un total de 8 reportes creados y entregados al docente.
"""